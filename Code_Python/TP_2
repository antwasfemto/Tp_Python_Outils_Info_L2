#%% EX1 part 1

N = 10 # Nombre total de lampes
maliste = [0] * N  # Liste regroupant le nombre de lampe
n = int(input("Entrez le nombre d’instants : "))
print(f"maliste = {maliste}")
for i in range(n):
    maliste = [0] * N  # Éteindre toutes les lampes
    index = i % N # Calculer la lampe à allumer 
    maliste[index] = 1
    print(f"maliste = {maliste}")

#%% EX1 part 2

N = 10 # Nombre total de lampes
maliste = [0] * N # Liste regroupant le nombre de lampe
n = int(input("Entrez le nombre d’instants : "))
print(f"maliste = {maliste}")
for i in range(n):  # Boucle à rebours
    maliste = [0] * N     # Éteindre toutes les lampes
    index = (N - (i % N) - 1)  # Calcule de la position à allumer à rebours
    maliste[index] = 1
    print(f"maliste = {maliste}")
#%% EX 2

dico = {
    "nom": input("Entrez votre nom : "),
    "prénom": input("Entrez votre prénom : "),
    "date de naissance": input("Entrez votre date de naissance : "),
    "email": input("Entrez votre adresse mail : "),
    "mot de passe": input("Entrez votre mot de passe : ")
}

# Afficher les informations enregistrées (sauf mot de passe, pour la sécurité)
print("\n Inscription réussie ! Voici les infos enregistrées :")
for clé, valeur in dico.items():
    if clé != "mot de passe":
        print(f"{clé.capitalize()} : {valeur}")
        
def voir_dico ():
    if input("Entrez votre mot de passe : ") == dico['mot de passe']:
        for clé, valeur in dico.items():
            if clé != "mot de passe":
                print(f"{clé.capitalize()} : {valeur}")

#%% extra try-exept

def factoriel_recurs(n):
    """
    This function allow computing the factorial number of the entry ’n’. It
    is using a recursive method which permit to decrease the computation time and  
    the necessary computer memory

    Input :
        ============


    n : The number that we  want compute the factorial parameter

    Output :
    ============

    The result of n!
    """
    # Ici nous avons une fonction récursive, à chaque nouveau tour, le fonction
    # enlève 1 à n se qui à pour effet d’obliger n à diminuer jusqu’à 1 et
    # donc de sortir de la boucle récursive.
    while True: # Déclenchement d’un boucle infinie
        try: # Test du type de variable
            if n==1: # Boucle if de test de la valeur de n
                return 1
                break # Sortie de la boucle
            elif n==0: # Boucle if de test de la valeur de n
                return 0
                break # Sortie de la boucle
            else:
                return n*factoriel_recurs(n=1) # Renvoie n que multiplie la
                                               # fonction elle même
                break # Sortie de la boucle
        except TypeError: # Si une erreur de type survient
                          # alors l’utilisateur devra 
                          # rentrer un nouveau nombre ‘n’
            print("Rentrez_un_nombre_de_type ‘integer’_")
            n=eval(input("Donnez_un_nombre_"))
            
if __name__=='__main__': # Programme principal
    A=factoriel_recurs('pas_un_nombre')
    print(A)

#%% EX 3

def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

n = int(input("Entrez un indice n pour calculer Fibonacci à l'indice n' : "))
print(f"Fibonnacci({n}) = {fibonacci(n)}")

